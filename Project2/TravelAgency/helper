bool Graph::comparePathsFF(PathFordFulkerson path1, PathFordFulkerson path2) {
    return (path1.capacity > path2.capacity);
}

bool Graph::findAugmentationPath(int source, int destination, vector<Vehicle> vehicles){
    bool hasFoundAPath = false;
    Vehicle vehicle;
    vehicle = Vehicle(0, 0, 0, 0);
    for(int i = 0; i < _size; i++){
        _locals[i].setCapacityFF(0);
        _locals[i].setVisitedFF(false);
        _locals[i].setPredFF(0);
        _locals[i].setPredVehicleFF(vehicle);
    }
    queue<int> q;
    _locals[source-1].setCapacityFF(INF);
    q.push(source);

    while(!q.empty()){
        int v = q.front();
        q.pop();
        _locals[v-1].setVisitedFF(true);
        for(auto e: _locals[v-1].getAdj()){
            if(e.getActiveFF()){
                int w = e.getDestination();
                if(!_locals[w-1].getVisitedFF()){
                    int capacity = min(_locals[v-1].getCapacityFF(), e.getCapacity());
                    if(_locals[w-1].getCapacityFF() < capacity){
                        if(w == destination){
                            hasFoundAPath = true;
                        }
                        _locals[w-1].setCapacityFF(capacity);
                        _locals[w-1].setPredVehicleFF(e);
                        _locals[w-1].setPredFF(v);
                    }
                    q.push(w);
                }
            }
        }
    }
    if(!hasFoundAPath){
        return false;
    }
    while(destination != source){
        vehicles.push_back(_locals[destination].
        getPredVehicleFF());
        destination = _locals[destination].getPredFF();
    }
    return true;
}

void Graph::fordFulkerson(int source, int destination) {
    vector<Vehicle> vehicles;
    for(int i = 0; i < _size; i++){
        _locals[i].setCapacityFF(0);
        for(auto e: _locals[i].getAdj()){
            e.setFlow(0);
        }
    }
    while(findAugmentationPath(source, destination, vehicles)){
        int capacity = INF;
        //Minimum global capacity
        for(Vehicle vehicle: vehicles){
            capacity = min(capacity, vehicle.getCapacity());
        }
        PathFordFulkerson pathFF;

        //Residual capacity in the graph
        for(Vehicle vehicle: vehicles){
            if(vehicle.getFlow() + capacity > vehicle.getCapacity()){
                capacity -= vehicle.getFlow() + capacity - vehicle.getCapacity();
            }
        }
        pathFF.capacity = capacity;

        //Final path
        for(Vehicle vehicle: vehicles){
            vehicle.setFlow(vehicle.getFlow() + capacity);
            if(vehicle.getFlow() == vehicle.getCapacity()){
                vehicle.setActiveFF(false);
            }
            pathFF.path.push_back({vehicle.getDuration(), vehicle.getDestination()});
            pathFF.duration += vehicle.getDuration();
        }
        //pathFF.path.push_back({0, 1});
        pathFF.path.push_back({0, source});
        _pathsFF.push_back(pathFF);
    }

}

void Graph::printFordFulkerson(int source, int destination, int groupDimension) {
    _pathsFF.clear();
    fordFulkerson(source, destination);

    int maxElements = 0;
    for(PathFordFulkerson pathFF: _pathsFF){
        maxElements += pathFF.capacity;
    }

    if(maxElements < groupDimension){
        cout << "Nao existe ligacao possivel entre a origem e a ligacao que escolheu para o numero de pessoas escolhidas (" << groupDimension << ")." << endl;
        cout << "A capacidade maxima do grupo para este caminho e de: " << maxElements <<"." << endl;
        return;
    }

    //Sort the Paths by decreasing order in capacity
    sort(_pathsFF.begin(), _pathsFF.end(), comparePathsFF);

    cout << "O caminho que tem de fazer e: " << endl;

    for (int i = 0; i < _pathsFF.size(); i++){
        printPathFF(_pathsFF[i], source);
    }

}

void Graph::printPathFF(PathFordFulkerson pathFF, int source) {
    int capacity = INF;
    for (int i =  pathFF.path.size() - 1; i >= 0; i--){
        capacity = min(capacity, pathFF.capacity);
        int next = pathFF.path[i].second;
        if(i == 0){
            cout << next << " (capacidade =" << capacity << ")." << endl;
        }
        else{
            cout <<next  << " --> ";
        }
    }
}